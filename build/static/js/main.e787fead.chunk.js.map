{"version":3,"sources":["services/contact.js","phonebook/Phonebook.js","App.js","index.js"],"names":["baseURL","contact","getAllContact","axios","get","then","res","data","addContact","contactObj","post","deleteContact","id","delete","response","updateContact","updatedData","put","Phonebook","useState","contacts","setContacts","setContact","number","setNumber","deleteAlert","setDeleteAlert","createAlert","setCreateAlert","invalidAlert","setInvalidAlert","useEffect","contactService","DeleteNotification","message","className","CreateNotification","ValidationNotification","onSubmit","event","preventDefault","name","exists","filter","person","toLowerCase","length","setTimeout","isNaN","concat","window","confirm","map","type","autoFocus","onChange","target","value","i","onClick","deleteObj","find","item","catch","handleDeleteContact","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e787fead.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst baseURL = \"/api/persons\";\r\n// const baseURL = \"https://thawing-wave-71967.herokuapp.com/api/persons\";\r\n\r\nconst getAllContact = () => {\r\n  const res = axios.get(baseURL).then((res) => res.data);\r\n  return res;\r\n};\r\n\r\nconst addContact = (contactObj) => {\r\n  const res = axios.post(baseURL, contactObj);\r\n  return res.then((res) => res.data);\r\n};\r\n\r\nconst deleteContact = (id) => {\r\n  const res = axios.delete(`${baseURL}/${id}`);\r\n  return res.then((response) => response.data);\r\n};\r\n\r\nconst updateContact = (id, updatedData) => {\r\n  const res = axios.put(`${baseURL}/${id}`, updatedData);\r\n  return res.then((response) => response.data);\r\n};\r\n\r\nconst contact = {\r\n  getAllContact,\r\n  addContact,\r\n  deleteContact,\r\n  updateContact,\r\n};\r\n\r\nexport default contact;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport contactService from \"../services/contact\";\r\nimport \"./phonebook.css\";\r\n\r\nconst Phonebook = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [contact, setContact] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const [deleteAlert, setDeleteAlert] = useState(null);\r\n  const [createAlert, setCreateAlert] = useState(null);\r\n  const [invalidAlert, setInvalidAlert] = useState(null);\r\n\r\n  useEffect(() => {\r\n    contactService.getAllContact().then((data) => {\r\n      setContacts(data);\r\n    });\r\n  }, []);\r\n\r\n  const handleAddContact = (event) => {\r\n    event.preventDefault();\r\n    const contactObj = { name: contact, number: number };\r\n\r\n    let exists = contacts.filter(\r\n      (person) => person.name.toLowerCase() === contactObj.name.toLowerCase()\r\n    );\r\n\r\n    if (exists.length === 0) {\r\n      if (contact === \"\" && number === \"\") {\r\n        setDeleteAlert(\"Contact's name or number can't be empty!\");\r\n        setTimeout(() => {\r\n          setDeleteAlert(null);\r\n        }, 5000);\r\n      } else if (contact.length < 6 || number.length < 6) {\r\n        setInvalidAlert(\"Name or Number can't be less than 6 characters long\");\r\n        setTimeout(() => {\r\n          setInvalidAlert(null);\r\n        }, 5000);\r\n      } else if (isNaN(number)) {\r\n        setInvalidAlert(\"Number can't contain string\");\r\n        setTimeout(() => {\r\n          setInvalidAlert(null);\r\n        }, 5000);\r\n      } else {\r\n        contactService.addContact(contactObj).then((data) => {\r\n          setContacts(contacts.concat(data));\r\n          setCreateAlert(`Contact \"${contactObj.name}\" added successfully`);\r\n          setTimeout(() => {\r\n            setCreateAlert(null);\r\n          }, 5000);\r\n        });\r\n      }\r\n    } else {\r\n      if (\r\n        window.confirm(\r\n          `The contact with name ${contactObj.name} already exists do you want to replace it?`\r\n        )\r\n      ) {\r\n        contactService.updateContact(exists[0].id, contactObj).then((data) => {\r\n          setContacts(contacts.map((person) => (person.name !== contactObj.name ? person : data)));\r\n        });\r\n        setCreateAlert(`Contact ${contactObj.name} updated successfully`);\r\n        setTimeout(() => {\r\n          setCreateAlert(null);\r\n        }, 5000);\r\n      }\r\n    }\r\n\r\n    setContact(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  const handleDeleteContact = (id) => {\r\n    const deleteObj = contacts.find((person) => person.id === id);\r\n    if (window.confirm(`do you really want to delete ${deleteObj.name}`))\r\n      contactService\r\n        .deleteContact(id)\r\n        .then(() => {\r\n          setContacts(contacts.filter((item) => item.id !== id));\r\n          setDeleteAlert(`${deleteObj.name} deleted successfully`);\r\n        })\r\n        .catch(() => {\r\n          setDeleteAlert(`unable to delete, the user  is already deleted from the server`);\r\n        });\r\n\r\n    setTimeout(() => {\r\n      setDeleteAlert(null);\r\n    }, 5000);\r\n  };\r\n\r\n  const DeleteNotification = ({ message }) => {\r\n    if (!message) return null;\r\n    return (\r\n      <div className=\"error\">\r\n        <p>{message}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const CreateNotification = ({ message }) => {\r\n    if (!message) return null;\r\n    return (\r\n      <div className=\"success\">\r\n        <p>{message}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const ValidationNotification = ({ message }) => {\r\n    if (!message) return null;\r\n    return (\r\n      <div className=\"invalid\">\r\n        <p>{message}</p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleNameChange = (event) => {\r\n    setContact(event.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNumber(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"phonebook\">\r\n      <h1>Phonebook</h1>\r\n      <DeleteNotification message={deleteAlert} />\r\n      <CreateNotification message={createAlert} />\r\n      <ValidationNotification message={invalidAlert} />\r\n\r\n      <form onSubmit={handleAddContact}>\r\n        <p>\r\n          Name <input type=\"text\" autoFocus onChange={handleNameChange} value={contact} />\r\n        </p>\r\n        <p>\r\n          Number <input type=\"text\" onChange={handleNumberChange} value={number} />\r\n        </p>\r\n        <button>add</button>\r\n      </form>\r\n      <ul>\r\n        {contacts.map((person, i) => (\r\n          <li key={i}>\r\n            <p>\r\n              {person.name} {person.number}\r\n              &nbsp;&nbsp;<button onClick={() => handleDeleteContact(person.id)}>delete</button>\r\n            </p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Phonebook;\r\n","import React from \"react\";\nimport \"./App.css\";\n// import Note from \"./notes/Note\";\nimport Phonebook from \"./phonebook/Phonebook\";\n\nconst App = () => {\n  return (\n    <>\n      {/* <Note /> */}\n      <Phonebook />\n    </>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}